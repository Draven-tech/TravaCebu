rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	// API usage tracking
    match /api_usage/{userId}/calls/{callId} {
      // Allow users to write their own logs
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow users to read their own logs (optional)
      allow read: if request.auth != null && request.auth.uid == userId;
      // Allow admins to read all logs
      allow read: if isAdmin();
    }
    
    // Allow admins to query all API usage data using collectionGroup
    match /{path=**}/calls/{callId} {
      allow read: if isAdmin();
    }
  
    match /jeepney_routes/{route} {
      allow read: if request.auth != null;  // Any authenticated user can read
      allow write: if isAdmin();            // Only admins can write
    }

    // Allow admins to manage events
    match /events/{event} {
      allow read, write: if isAdmin();
    }
    
    // User itinerary events
    match /user_itinerary_events/{eventId} {
      allow read: if request.auth != null && 
                  request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
                    request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
                    request.auth.uid == resource.data.userId;
    }
    
    // User-Reviews
    match /tourist_spots/{spot} {
      allow read: if request.auth != null;
      
      // Allow authenticated users to create new tourist spots
      allow create: if request.auth != null;
      
      // Only admins can update/delete tourist spots
      allow update, delete: if isAdmin();
      
      // allow writing reviews if authenticated
      match /reviews/{reviewId} {
        allow create: if request.auth != null;
        allow read: if request.auth != null;
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }

      // New rule for reviews subcollection
      match /reviews/{reviewId} {
        // Authenticated users can create reviews
        allow create: if request.auth != null;
        // Anyone logged in can read reviews
        allow read: if request.auth != null;
        // Only the review author can update/delete their review (optional)
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }
    }

    // Pending tourist spots approval system
    match /pending_tourist_spots/{spotId} {
      // Users can create their own submissions
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.submittedBy;
      
      // Users can read their own submissions
      allow read: if request.auth != null && 
                  request.auth.uid == resource.data.submittedBy;
      
      // Only admins can update/delete pending spots (for approval/rejection)
      allow update, delete: if isAdmin();
      
      // Allow admins to read all pending spots
      allow read: if isAdmin();
    }

    // Admin user verification
    match /admins/{userId} {
      allow read: if request.auth != null;
      allow write: if false; // Admins are set manually
    }
    
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /users/{userId}/visitedSpots/{spotId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId}/bucketList/{spotId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Posts collection rules
    match /posts/{postId} {
      // Allow reading public posts or user's own posts
      allow read: if request.auth != null && 
                  (resource.data.isPublic == true || 
                   resource.data.userId == request.auth.uid);

      // Users can create their own posts
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;

      // Users can update their own posts
      allow update: if request.auth != null && 
                    request.auth.uid == resource.data.userId;

      // Users can delete their own posts
      allow delete: if request.auth != null && 
                    request.auth.uid == resource.data.userId;
    }

    // Helper function
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
} 